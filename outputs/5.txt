Tests run on Wed Feb 12 22:21:19 UTC 2025

Decompressing your archive...
tar: vsopcompiler/source11.vsop: time stamp 2025-02-12 22:40:38 is 1158.755825581 s in the future
tar: vsopcompiler/source12.vsop: time stamp 2025-02-12 22:40:38 is 1158.75576121 s in the future
tar: vsopcompiler/driver.cpp: time stamp 2025-02-12 22:40:38 is 1158.755721266 s in the future
tar: vsopcompiler/driver.hpp: time stamp 2025-02-12 22:40:38 is 1158.755676071 s in the future
tar: vsopcompiler/lexer.lex: time stamp 2025-02-12 22:40:38 is 1158.755635813 s in the future
tar: vsopcompiler/main.cpp: time stamp 2025-02-12 22:40:38 is 1158.755590674 s in the future
tar: vsopcompiler/Makefile: time stamp 2025-02-12 22:40:38 is 1158.755554366 s in the future
tar: vsopcompiler/parser.y: time stamp 2025-02-12 22:40:38 is 1158.75551875 s in the future
tar: vsopcompiler/source1.vsop: time stamp 2025-02-12 22:40:38 is 1158.755478372 s in the future
tar: vsopcompiler/source2.vsop: time stamp 2025-02-12 22:40:38 is 1158.755436807 s in the future
tar: vsopcompiler/source4.vsop: time stamp 2025-02-12 22:40:38 is 1158.755398828 s in the future
tar: vsopcompiler/source9.vsop: time stamp 2025-02-12 22:40:38 is 1158.755362721 s in the future
tar: vsopcompiler/source10.vsop: time stamp 2025-02-12 22:40:38 is 1158.755323892 s in the future
tar: vsopcompiler: time stamp 2025-02-12 22:40:38 is 1158.755298574 s in the future
Entering vsopcompiler folder...
Installing build tools...
make: Warning: File 'Makefile' has modification time 1158 s in the future
nothing to do
make: warning:  Clock skew detected.  Your build may be incomplete.
Building your VSOP compiler...
make: Warning: File 'Makefile' has modification time 1158 s in the future
bison -d -o parser.cpp parser.y
clang++ -Wall -Wextra   -c -o main.o main.cpp
clang++ -Wall -Wextra   -c -o driver.o driver.cpp
bison -d -o parser.cpp parser.y
clang++ -Wall -Wextra   -c -o parser.o parser.cpp
In file included from parser.cpp:41:
parser.hpp:1841:19: warning: private field 'driver' is not used [-Wunused-private-field]
    VSOP::Driver &driver;
                  ^
1 warning generated.
flex  -o lexer.cpp lexer.lex
lexer.lex:56: warning, rule cannot be matched
clang++ -Wall -Wextra   -c -o lexer.o lexer.cpp
clang++ -o vsopc  main.o driver.o parser.o lexer.o
make: warning:  Clock skew detected.  Your build may be incomplete.
Your VSOP compiler seems to have been built successfully. We will now
proceed to some basic conformance tests of your lexer.

Please note that the tests are not exhaustive, and full success on the
tests does not mean your lexer is perfect. You are responsible for
testing your lexer. Write your own tests!

If a test fails, this script will output the corresponding VSOP code,
the expected output, and your compiler output. We will only report this
information for the first few failed tests, however.

Note that as the e-mail transfer is destroying many non-printable
characters, the files are printed with 'cat -v', i.e. "\r" is replaced
by "^M", "\f" by "^L", etc.

As you were free to design your own error messages, and we did not specified
what you should do after a lexical error (e.g. stop, continue just after the
faulty token, try to resynchronize on a likely token start, etc.), this script
will only check error messages up to the "<FILENAME>:<LINE>:<COL>: lexical
error", and will stop both error and output processing after the first error.

If you think the expected output is wrong, and your compiler is correct, double
check the VSOP manual and the wording. If, after that, you still think you are
correct and we are wrong, report it to the teaching assistant.

If the script crashes, report it to the teaching assistant.

01-decimal-numbers.vsop... PASS
02-whitespace.vsop... PASS
03-single-line-comments.vsop... PASS
04-multiline-comments.vsop... PASS
05-hex-numbers.vsop... PASS
06-keywords.vsop... PASS
07-type-identifiers.vsop... PASS
08-object-identifiers.vsop... PASS
09-basic-strings.vsop... PASS
10-strings-with-escapes.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
"String with backspace_\b"
"String with\ttab"
"String with line feed.\n"
"String with line feed\nand second line.\n"
"Overwritten\rAllows overwritting current line in well-behaved terminals.\n"
"Here is a \"nested string\".\n"
"A string escape sequence is introduced by a `\\`.\n"
"Here follows a form feed.\x0a\x0bAnd now some new page content.\n"
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
1,1,string-literal,"String with backspace_\x08"
2,1,string-literal,"String with\x09tab"
3,1,string-literal,"String with line feed.\x0a"
4,1,string-literal,"String with line feed\x0aand second line.\x0a"
5,1,string-literal,"Overwritten\x0dAllows overwritting current line in well-behaved terminals.\x0a"
6,1,string-literal,"Here is a \x22nested string\x22.\x0a"
7,1,string-literal,"A string escape sequence is introduced by a `\x5c`.\x0a"
8,1,string-literal,"Here follows a form feed.And now some new page content.\x0a"
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
1,1,string-literal,"String with backspace_\x08"
2,1,string-literal,"String with\x09tab"
3,1,string-literal,"String with line feed.\x0a"
4,1,string-literal,"String with line feed\x0aand second line.\x0a"
5,1,string-literal,"Overwritten\x0dAllows overwritting current line in well-behaved terminals.\x0a"
6,1,string-literal,"Here is a \x22nested string\x22.\x0a"
7,1,string-literal,"A string escape sequence is introduced by a `\x5c`.\x0a"
8,1,string-literal,"Here follows a form feed.\x0a\x0bAnd now some new page content.\x0a"
----------------- 8< -----------------

11-multiline-string.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
"Here i\
 t is, the broken\n\
 line.\n"
"Another one,\n\
without leading space.\n"
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
3,2,string-literal,"Here it is, the broken\x0aline.\x0a"
5,1,string-literal,"Another one,\x0awithout leading space.\x0a"
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
1,1,string-literal,"Here it is, the broken\x0aline.\x0a"
4,1,string-literal,"Another one,\x0awithout leading space.\x0a"
----------------- 8< -----------------

12-comment-in-string.vsop... PASS
13-operators.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
{ } () : ;
, + - * / ^
. = < <= <-
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
1,1,lbrace
1,3,rbrace
1,5,lparen
1,6,rparen
1,8,colon
1,10,semicolon
2,1,comma
2,3,plus
2,5,minus
2,7,times
2,9,div
2,11,pow
3,1,dot
3,3,equal
3,5,lower
3,7,lower-equal
3,10,assign
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
1,1,lbrace
1,3,rbrace
1,5,lpar
1,6,rpar
1,8,colon
1,10,semicolon
2,1,comma
2,3,plus
2,5,minus
2,7,times
2,9,div
2,11,pow
3,1,dot
3,3,equal
3,5,lower
3,7,lower-equal
3,10,assign
----------------- 8< -----------------

14-eof-after-decimal-number.vsop... PASS
15-eof-after-object-identifier.vsop... PASS
16-eof-after-string.vsop... PASS
17-eof-after-keyword.vsop... PASS
18-eof-after-comment.vsop... PASS
19-MyClass-example.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
class MyClass {
    s : string <- "One\n\x1b[33;mTwo and \
                   three\r\n";
    i : int32 <- 0x1b;
}
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
1,1,class
1,7,type-identifier,MyClass
1,15,lbrace
2,5,object-identifier,s
2,7,colon
2,9,string
2,16,assign
3,20,string-literal,"One\x0a[33;mTwo and three\x0d\x0a"
3,30,semicolon
4,5,object-identifier,i
4,7,colon
4,9,int32
4,15,assign
4,18,integer-literal,27
4,22,semicolon
5,1,rbrace
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
1,1,class
1,7,type-identifier,MyClass
1,15,lbrace
2,5,object-identifier,s
2,7,colon
2,9,string
2,16,assign
2,19,string-literal,"One\x0a\x1b[33;mTwo and three\x0d\x0a"
3,30,semicolon
4,5,object-identifier,i
4,7,colon
4,9,int32
4,15,assign
4,18,integer-literal,27
4,22,semicolon
5,1,rbrace
----------------- 8< -----------------

20-factorial-example.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
class Main {
    factorial(n : int32) : int32 {
        if n < 2 then 1
        else n * factorial(n - 1)
    }

    main() : int32 {
        print("Enter an integer greater-than or equal to 0: ");
        let n : int32 <- inputInt32() in
        if n < 0 then {
            print("Error: number must be greater-than or equal to 0.\n");
            -1
        } else {
            print("The factorial of ").printInt32(n).print(" is ");
            printInt32(factorial(n)).print("\n");
            0
        }
    }
}
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
1,1,class
1,7,type-identifier,Main
1,12,lbrace
2,5,object-identifier,factorial
2,14,lparen
2,15,object-identifier,n
2,17,colon
2,19,int32
2,24,rparen
2,26,colon
2,28,int32
2,34,lbrace
3,9,if
3,12,object-identifier,n
3,14,lower
3,16,integer-literal,2
3,18,then
3,23,integer-literal,1
4,9,else
4,14,object-identifier,n
4,16,times
4,18,object-identifier,factorial
4,27,lparen
4,28,object-identifier,n
4,30,minus
4,32,integer-literal,1
4,33,rparen
5,5,rbrace
7,5,object-identifier,main
7,9,lparen
7,10,rparen
7,12,colon
7,14,int32
7,20,lbrace
8,9,object-identifier,print
8,14,lparen
8,15,string-literal,"Enter an integer greater-than or equal to 0: "
8,62,rparen
8,63,semicolon
9,9,let
9,13,object-identifier,n
9,15,colon
9,17,int32
9,23,assign
9,26,object-identifier,inputInt32
9,36,lparen
9,37,rparen
9,39,in
10,9,if
10,12,object-identifier,n
10,14,lower
10,16,integer-literal,0
10,18,then
10,23,lbrace
11,13,object-identifier,print
11,18,lparen
11,19,string-literal,"Error: number must be greater-than or equal to 0.\x0a"
11,72,rparen
11,73,semicolon
12,13,minus
12,14,integer-literal,1
13,9,rbrace
13,11,else
13,16,lbrace
14,13,object-identifier,print
14,18,lparen
14,19,string-literal,"The factorial of "
14,38,rparen
14,39,dot
14,40,object-identifier,printInt32
14,50,lparen
14,51,object-identifier,n
14,52,rparen
14,53,dot
14,54,object-identifier,print
14,59,lparen
14,60,string-literal," is "
14,66,rparen
14,67,semicolon
15,13,object-identifier,printInt32
15,23,lparen
15,24,object-identifier,factorial
15,33,lparen
15,34,object-identifier,n
15,35,rparen
15,36,rparen
15,37,dot
15,38,object-identifier,print
15,43,lparen
15,44,string-literal,"\x0a"
15,48,rparen
15,49,semicolon
16,13,integer-literal,0
17,9,rbrace
18,5,rbrace
19,1,rbrace
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
1,1,class
1,7,type-identifier,Main
1,12,lbrace
2,5,object-identifier,factorial
2,14,lpar
2,15,object-identifier,n
2,17,colon
2,19,int32
2,24,rpar
2,26,colon
2,28,int32
2,34,lbrace
3,9,if
3,12,object-identifier,n
3,14,lower
3,16,integer-literal,2
3,18,then
3,23,integer-literal,1
4,9,else
4,14,object-identifier,n
4,16,times
4,18,object-identifier,factorial
4,27,lpar
4,28,object-identifier,n
4,30,minus
4,32,integer-literal,1
4,33,rpar
5,5,rbrace
7,5,object-identifier,main
7,9,lpar
7,10,rpar
7,12,colon
7,14,int32
7,20,lbrace
8,9,object-identifier,print
8,14,lpar
8,15,string-literal,"Enter an integer greater-than or equal to 0: "
8,62,rpar
8,63,semicolon
9,9,let
9,13,object-identifier,n
9,15,colon
9,17,int32
9,23,assign
9,26,object-identifier,inputInt32
9,36,lpar
9,37,rpar
9,39,in
10,9,if
10,12,object-identifier,n
10,14,lower
10,16,integer-literal,0
10,18,then
10,23,lbrace
11,13,object-identifier,print
11,18,lpar
11,19,string-literal,"Error: number must be greater-than or equal to 0.\x0a"
11,72,rpar
11,73,semicolon
12,13,minus
12,14,integer-literal,1
13,9,rbrace
13,11,else
13,16,lbrace
14,13,object-identifier,print
14,18,lpar
14,19,string-literal,"The factorial of "
14,38,rpar
14,39,dot
14,40,object-identifier,printInt32
14,50,lpar
14,51,object-identifier,n
14,52,rpar
14,53,dot
14,54,object-identifier,print
14,59,lpar
14,60,string-literal," is "
14,66,rpar
14,67,semicolon
15,13,object-identifier,printInt32
15,23,lpar
15,24,object-identifier,factorial
15,33,lpar
15,34,object-identifier,n
15,35,rpar
15,36,rpar
15,37,dot
15,38,object-identifier,print
15,43,lpar
15,44,string-literal,"\x0a"
15,48,rpar
15,49,semicolon
16,13,integer-literal,0
17,9,rbrace
18,5,rbrace
19,1,rbrace
----------------- 8< -----------------

21-list-example.vsop... FAIL
22-unterminated-comment.vsop... FAIL
23-unterminated-nested-comment.vsop... FAIL
24-wrong-decimal-number.vsop... FAIL
25-incomplete-hex-number.vsop... FAIL
26-wrong-hex-number.vsop... FAIL
27-number-followed-by-operator.vsop... PASS
28-invalid-lf-in-string.vsop... FAIL
29-unterminated-string.vsop... FAIL
30-unterminated-multiline-string.vsop... FAIL
31-unknown-escape-sequence.vsop... FAIL
32-string-ends-in-backslash.vsop... FAIL
33-string-ends-in-backslash-x.vsop... FAIL
34-string-ends-in-backslash-x-3.vsop... FAIL
35-wrong-backslash-x-escape.vsop... FAIL
36-illegal-char-dollar.vsop... FAIL
37-illegal-char-tilde.vsop... FAIL
38-illegal-char-exclamation-mark.vsop... PASS
39-illegal-char-rbracket.vsop... FAIL

lexer-tests: passed 17 tests out of 39.
Still some work to do!
