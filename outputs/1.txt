Tests run on Wed Feb 12 03:39:45 UTC 2025

Decompressing your archive...
tar: vsopcompiler/driver.cpp: time stamp 2025-02-12 03:59:38 is 1192.523834206 s in the future
tar: vsopcompiler/driver.hpp: time stamp 2025-02-12 03:59:38 is 1192.523768362 s in the future
tar: vsopcompiler/lexer.lex: time stamp 2025-02-12 03:59:38 is 1192.52371203 s in the future
tar: vsopcompiler/main.cpp: time stamp 2025-02-12 03:59:38 is 1192.523651042 s in the future
tar: vsopcompiler/Makefile: time stamp 2025-02-12 03:59:38 is 1192.523599573 s in the future
tar: vsopcompiler/parser.y: time stamp 2025-02-12 03:59:38 is 1192.523546553 s in the future
tar: vsopcompiler/source1.vsop: time stamp 2025-02-12 03:59:38 is 1192.52347766 s in the future
tar: vsopcompiler/source2.vsop: time stamp 2025-02-12 03:59:38 is 1192.52342393 s in the future
tar: vsopcompiler: time stamp 2025-02-12 03:59:38 is 1192.523392424 s in the future
Entering vsopcompiler folder...
Installing build tools...
make: Warning: File 'Makefile' has modification time 1191 s in the future
nothing to do
make: warning:  Clock skew detected.  Your build may be incomplete.
Building your VSOP compiler...
make: Warning: File 'Makefile' has modification time 1191 s in the future
bison -d -o parser.cpp parser.y
clang++ -Wall -Wextra   -c -o main.o main.cpp
clang++ -Wall -Wextra   -c -o driver.o driver.cpp
bison -d -o parser.cpp parser.y
clang++ -Wall -Wextra   -c -o parser.o parser.cpp
In file included from parser.cpp:41:
parser.hpp:1841:19: warning: private field 'driver' is not used [-Wunused-private-field]
    VSOP::Driver &driver;
                  ^
1 warning generated.
flex  -o lexer.cpp lexer.lex
lexer.lex:57: warning, rule cannot be matched
clang++ -Wall -Wextra   -c -o lexer.o lexer.cpp
clang++ -o vsopc  main.o driver.o parser.o lexer.o
make: warning:  Clock skew detected.  Your build may be incomplete.
Your VSOP compiler seems to have been built successfully. We will now
proceed to some basic conformance tests of your lexer.

Please note that the tests are not exhaustive, and full success on the
tests does not mean your lexer is perfect. You are responsible for
testing your lexer. Write your own tests!

If a test fails, this script will output the corresponding VSOP code,
the expected output, and your compiler output. We will only report this
information for the first few failed tests, however.

Note that as the e-mail transfer is destroying many non-printable
characters, the files are printed with 'cat -v', i.e. "\r" is replaced
by "^M", "\f" by "^L", etc.

As you were free to design your own error messages, and we did not specified
what you should do after a lexical error (e.g. stop, continue just after the
faulty token, try to resynchronize on a likely token start, etc.), this script
will only check error messages up to the "<FILENAME>:<LINE>:<COL>: lexical
error", and will stop both error and output processing after the first error.

If you think the expected output is wrong, and your compiler is correct, double
check the VSOP manual and the wording. If, after that, you still think you are
correct and we are wrong, report it to the teaching assistant.

If the script crashes, report it to the teaching assistant.

01-decimal-numbers.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
0 42 042 2147483647
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
1:1:integer-literal:0
1:3:integer-literal:42
1:6:integer-literal:42
1:10:integer-literal:2147483647
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
1,1,integer-literal,0
1,3,integer-literal,42
1,6,integer-literal,42
1,10,integer-literal,2147483647
----------------- 8< -----------------

02-whitespace.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
1 2
  3
4	5
6 7    
8 9
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
1:1:integer-literal:1
1:3:integer-literal:2
1:7:integer-literal:3
1:9:integer-literal:4
1:11:integer-literal:5
1:13:integer-literal:6
1:15:integer-literal:7
1:21:integer-literal:8
1:23:integer-literal:9
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
1,1,integer-literal,1
1,3,integer-literal,2
2,3,integer-literal,3
3,1,integer-literal,4
3,3,integer-literal,5
4,1,integer-literal,6
4,3,integer-literal,7
5,1,integer-literal,8
5,3,integer-literal,9
----------------- 8< -----------------

03-single-line-comments.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
// This should be commented
1
// Other comment, including numbers: 42 1984
        2 // After space
	3	// After tab //
4 // With unterminated string "I am not a string
5 // With unterminated comment (* I am not a nested comment
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
1:29:integer-literal:1
1:84:integer-literal:2
1:102:integer-literal:3
1:120:integer-literal:4
1:169:integer-literal:5
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
2,1,integer-literal,1
4,9,integer-literal,2
5,2,integer-literal,3
6,1,integer-literal,4
7,1,integer-literal,5
----------------- 8< -----------------

04-multiline-comments.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
(* One line multi-line comment *)
1 (* Another one *)
2 (* One followed by tokens *) 3 4
(* One followed by another one *) (* Another comment *) 5
(* One multi-line comment.
   Second line. *)
6
(*
 * Another style of
 * multi-lines comments
 *)
7
(* One comment (* With (* nested (* comments *) *) *) *)
8
(* One comment with "no string in it *)
9
(* One comment // only, no nesting, 10 should be read *) 10
(* Same, but on several lines
// I was already commented, so 11 should be read *) 11
(**) 12 (* (*) In nested comment *)
Still commented *)
13
(* Final comment *)
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
1:35:integer-literal:1
1:55:integer-literal:2
1:86:integer-literal:3
1:88:integer-literal:4
1:146:integer-literal:5
2:20:integer-literal:6
5:5:integer-literal:7
5:64:integer-literal:8
5:106:integer-literal:9
5:165:integer-literal:10
6:53:integer-literal:11
6:61:integer-literal:12
7:20:integer-literal:13
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
2,1,integer-literal,1
3,1,integer-literal,2
3,32,integer-literal,3
3,34,integer-literal,4
4,57,integer-literal,5
7,1,integer-literal,6
12,1,integer-literal,7
14,1,integer-literal,8
16,1,integer-literal,9
17,58,integer-literal,10
19,53,integer-literal,11
20,6,integer-literal,12
22,1,integer-literal,13
----------------- 8< -----------------

05-hex-numbers.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
0x0
0x002a 0x2a // With and without leading zeroes
0x7fffffff
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
1:1:integer-literal:0
1:5:integer-literal:42
1:12:integer-literal:42
1:52:integer-literal:2147483647
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
1,1,integer-literal,0
2,1,integer-literal,42
2,8,integer-literal,42
3,1,integer-literal,2147483647
----------------- 8< -----------------

06-keywords.vsop... FAIL
07-type-identifiers.vsop... FAIL
08-object-identifiers.vsop... FAIL
09-basic-strings.vsop... FAIL
10-strings-with-escapes.vsop... FAIL
11-multiline-string.vsop... FAIL
12-comment-in-string.vsop... FAIL
13-operators.vsop... FAIL
14-eof-after-decimal-number.vsop... FAIL
15-eof-after-object-identifier.vsop... FAIL
16-eof-after-string.vsop... FAIL
17-eof-after-keyword.vsop... FAIL
18-eof-after-comment.vsop... FAIL
19-MyClass-example.vsop... FAIL
20-factorial-example.vsop... FAIL
21-list-example.vsop... FAIL
22-unterminated-comment.vsop... FAIL
23-unterminated-nested-comment.vsop... FAIL
24-wrong-decimal-number.vsop... FAIL
25-incomplete-hex-number.vsop... FAIL
26-wrong-hex-number.vsop... FAIL
27-number-followed-by-operator.vsop... FAIL
28-invalid-lf-in-string.vsop... FAIL
29-unterminated-string.vsop... FAIL
30-unterminated-multiline-string.vsop... FAIL
31-unknown-escape-sequence.vsop... FAIL
32-string-ends-in-backslash.vsop... PASS
33-string-ends-in-backslash-x.vsop... FAIL
34-string-ends-in-backslash-x-3.vsop... FAIL
35-wrong-backslash-x-escape.vsop... FAIL
36-illegal-char-dollar.vsop... FAIL
37-illegal-char-tilde.vsop... FAIL
38-illegal-char-exclamation-mark.vsop... PASS
39-illegal-char-rbracket.vsop... FAIL

lexer-tests: passed 2 tests out of 39.
Still some work to do!
