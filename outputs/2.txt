Tests run on Wed Feb 12 21:05:14 UTC 2025

Decompressing your archive...
tar: vsopcompiler/driver.cpp: time stamp 2025-02-12 21:24:42 is 1167.783785072 s in the future
tar: vsopcompiler/driver.hpp: time stamp 2025-02-12 21:24:42 is 1167.783721233 s in the future
tar: vsopcompiler/lexer.lex: time stamp 2025-02-12 21:24:42 is 1167.783662204 s in the future
tar: vsopcompiler/main.cpp: time stamp 2025-02-12 21:24:42 is 1167.783601013 s in the future
tar: vsopcompiler/Makefile: time stamp 2025-02-12 21:24:42 is 1167.783531272 s in the future
tar: vsopcompiler/parser.y: time stamp 2025-02-12 21:24:42 is 1167.783471725 s in the future
tar: vsopcompiler/source1.vsop: time stamp 2025-02-12 21:24:42 is 1167.783418174 s in the future
tar: vsopcompiler/source2.vsop: time stamp 2025-02-12 21:24:42 is 1167.783369708 s in the future
tar: vsopcompiler/location.hh: time stamp 2025-02-12 21:24:42 is 1167.783303792 s in the future
tar: vsopcompiler/parser.hpp: time stamp 2025-02-12 21:24:42 is 1167.783065976 s in the future
tar: vsopcompiler/parser.cpp: time stamp 2025-02-12 21:24:42 is 1167.782777446 s in the future
tar: vsopcompiler/main.o: time stamp 2025-02-12 21:24:42 is 1167.781703907 s in the future
tar: vsopcompiler/driver.o: time stamp 2025-02-12 21:24:42 is 1167.780619303 s in the future
tar: vsopcompiler/parser.o: time stamp 2025-02-12 21:24:42 is 1167.779749476 s in the future
tar: vsopcompiler/lexer.cpp: time stamp 2025-02-12 21:24:42 is 1167.779025018 s in the future
tar: vsopcompiler/lexer.o: time stamp 2025-02-12 21:24:42 is 1167.777865907 s in the future
tar: vsopcompiler/vsopc: time stamp 2025-02-12 21:24:42 is 1167.776018075 s in the future
tar: vsopcompiler/part1/driver.cpp: time stamp 2025-02-12 21:25:08 is 1193.77596151 s in the future
tar: vsopcompiler/part1/driver.hpp: time stamp 2025-02-12 21:25:08 is 1193.775901129 s in the future
tar: vsopcompiler/part1/lexer.lex: time stamp 2025-02-12 21:25:08 is 1193.775853637 s in the future
tar: vsopcompiler/part1/main.cpp: time stamp 2025-02-12 21:25:08 is 1193.775797551 s in the future
tar: vsopcompiler/part1/Makefile: time stamp 2025-02-12 21:25:08 is 1193.775752909 s in the future
tar: vsopcompiler/part1/parser.y: time stamp 2025-02-12 21:25:08 is 1193.775698903 s in the future
tar: vsopcompiler/part1/source1.vsop: time stamp 2025-02-12 21:25:08 is 1193.775653612 s in the future
tar: vsopcompiler/part1/source2.vsop: time stamp 2025-02-12 21:25:08 is 1193.775602391 s in the future
tar: vsopcompiler/part1: time stamp 2025-02-12 21:25:08 is 1193.775571792 s in the future
tar: vsopcompiler: time stamp 2025-02-12 21:24:42 is 1167.775561195 s in the future
Entering vsopcompiler folder...
Installing build tools...
make: Warning: File 'Makefile' has modification time 1167 s in the future
nothing to do
make: warning:  Clock skew detected.  Your build may be incomplete.
Building your VSOP compiler...
make: Warning: File 'Makefile' has modification time 1167 s in the future
make: 'vsopc' is up to date.
make: warning:  Clock skew detected.  Your build may be incomplete.
Your VSOP compiler seems to have been built successfully. We will now
proceed to some basic conformance tests of your lexer.

Please note that the tests are not exhaustive, and full success on the
tests does not mean your lexer is perfect. You are responsible for
testing your lexer. Write your own tests!

If a test fails, this script will output the corresponding VSOP code,
the expected output, and your compiler output. We will only report this
information for the first few failed tests, however.

Note that as the e-mail transfer is destroying many non-printable
characters, the files are printed with 'cat -v', i.e. "\r" is replaced
by "^M", "\f" by "^L", etc.

As you were free to design your own error messages, and we did not specified
what you should do after a lexical error (e.g. stop, continue just after the
faulty token, try to resynchronize on a likely token start, etc.), this script
will only check error messages up to the "<FILENAME>:<LINE>:<COL>: lexical
error", and will stop both error and output processing after the first error.

If you think the expected output is wrong, and your compiler is correct, double
check the VSOP manual and the wording. If, after that, you still think you are
correct and we are wrong, report it to the teaching assistant.

If the script crashes, report it to the teaching assistant.

01-decimal-numbers.vsop... PASS
02-whitespace.vsop... PASS
03-single-line-comments.vsop... PASS
04-multiline-comments.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
(* One line multi-line comment *)
1 (* Another one *)
2 (* One followed by tokens *) 3 4
(* One followed by another one *) (* Another comment *) 5
(* One multi-line comment.
   Second line. *)
6
(*
 * Another style of
 * multi-lines comments
 *)
7
(* One comment (* With (* nested (* comments *) *) *) *)
8
(* One comment with "no string in it *)
9
(* One comment // only, no nesting, 10 should be read *) 10
(* Same, but on several lines
// I was already commented, so 11 should be read *) 11
(**) 12 (* (*) In nested comment *)
Still commented *)
13
(* Final comment *)
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
2,1,integer-literal,1
3,1,integer-literal,2
3,32,integer-literal,3
3,34,integer-literal,4
4,57,integer-literal,5
8,1,integer-literal,6
16,1,integer-literal,7
18,1,integer-literal,8
20,1,integer-literal,9
21,58,integer-literal,10
24,53,integer-literal,11
25,6,integer-literal,12
28,1,integer-literal,13
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
2,1,integer-literal,1
3,1,integer-literal,2
3,32,integer-literal,3
3,34,integer-literal,4
4,57,integer-literal,5
7,1,integer-literal,6
12,1,integer-literal,7
14,1,integer-literal,8
16,1,integer-literal,9
17,58,integer-literal,10
19,53,integer-literal,11
20,6,integer-literal,12
22,1,integer-literal,13
----------------- 8< -----------------

05-hex-numbers.vsop... PASS
06-keywords.vsop... PASS
07-type-identifiers.vsop... PASS
08-object-identifiers.vsop... PASS
09-basic-strings.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
"Here is a simple string literal."
    "and here is another one."
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
1,1,string-literal,Here is a simple string literal.
2,5,string-literal,and here is another one.
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
1,1,string-literal,"Here is a simple string literal."
2,5,string-literal,"and here is another one."
----------------- 8< -----------------

10-strings-with-escapes.vsop... FAIL

Your compiler detected an error, but input was valid.

Here is the input file:
----------------- 8< -----------------
"String with backspace_\b"
"String with\ttab"
"String with line feed.\n"
"String with line feed\nand second line.\n"
"Overwritten\rAllows overwritting current line in well-behaved terminals.\n"
"Here is a \"nested string\".\n"
"A string escape sequence is introduced by a `\\`.\n"
"Here follows a form feed.\x0a\x0bAnd now some new page content.\n"
----------------- 8< -----------------

Here is your program's error output:
----------------- 8< -----------------
10-strings-with-escapes.vsop:6:27: lexical error: invalid character: \
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
1,1,string-literal,"String with backspace_\x08"
2,1,string-literal,"String with\x09tab"
3,1,string-literal,"String with line feed.\x0a"
4,1,string-literal,"String with line feed\x0aand second line.\x0a"
5,1,string-literal,"Overwritten\x0dAllows overwritting current line in well-behaved terminals.\x0a"
6,1,string-literal,"Here is a \x22nested string\x22.\x0a"
7,1,string-literal,"A string escape sequence is introduced by a `\x5c`.\x0a"
8,1,string-literal,"Here follows a form feed.\x0a\x0bAnd now some new page content.\x0a"
----------------- 8< -----------------

11-multiline-string.vsop... FAIL

Your compiler detected an error, but input was valid.

Here is the input file:
----------------- 8< -----------------
"Here i\
 t is, the broken\n\
 line.\n"
"Another one,\n\
without leading space.\n"
----------------- 8< -----------------

Here is your program's error output:
----------------- 8< -----------------
11-multiline-string.vsop:1:1: lexical error: \n is forbiden in string
11-multiline-string.vsop:2:1: lexical error: \n is forbiden in string
11-multiline-string.vsop:4:1: lexical error: \n is forbiden in string
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
1,1,string-literal,"Here it is, the broken\x0aline.\x0a"
4,1,string-literal,"Another one,\x0awithout leading space.\x0a"
----------------- 8< -----------------

12-comment-in-string.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
"This is (* no comment *)."
"This is not (* unterminated."
"This is neither a comment, nor // unterminated."
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
1,1,string-literal,This is (* no comment *).
2,1,string-literal,This is not (* unterminated.
3,1,string-literal,This is neither a comment, nor // unterminated.
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
1,1,string-literal,"This is (* no comment *)."
2,1,string-literal,"This is not (* unterminated."
3,1,string-literal,"This is neither a comment, nor // unterminated."
----------------- 8< -----------------

13-operators.vsop... FAIL
14-eof-after-decimal-number.vsop... PASS
15-eof-after-object-identifier.vsop... PASS
16-eof-after-string.vsop... FAIL
17-eof-after-keyword.vsop... PASS
18-eof-after-comment.vsop... PASS
19-MyClass-example.vsop... FAIL
20-factorial-example.vsop... FAIL
21-list-example.vsop... FAIL
22-unterminated-comment.vsop... FAIL
23-unterminated-nested-comment.vsop... FAIL
24-wrong-decimal-number.vsop... FAIL
25-incomplete-hex-number.vsop... FAIL
26-wrong-hex-number.vsop... FAIL
27-number-followed-by-operator.vsop... PASS
28-invalid-lf-in-string.vsop... FAIL
29-unterminated-string.vsop... FAIL
30-unterminated-multiline-string.vsop... FAIL
31-unknown-escape-sequence.vsop... FAIL
32-string-ends-in-backslash.vsop... FAIL
33-string-ends-in-backslash-x.vsop... FAIL
34-string-ends-in-backslash-x-3.vsop... FAIL
35-wrong-backslash-x-escape.vsop... FAIL
36-illegal-char-dollar.vsop... FAIL
37-illegal-char-tilde.vsop... FAIL
38-illegal-char-exclamation-mark.vsop... PASS
39-illegal-char-rbracket.vsop... FAIL

lexer-tests: passed 13 tests out of 39.
Still some work to do!
