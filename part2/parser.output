Grammar

    0 $accept: program $end

    1 program: class_list

    2 class_list: class
    3           | class_list class

    4 class: "class" TYPE_IDENTIFIER "{" member_list "}"
    5      | "class" TYPE_IDENTIFIER "extends" TYPE_IDENTIFIER "{" member_list "}"

    6 member_list: ε
    7            | member_list member

    8 member: field
    9       | method

   10 field: OBJECT_IDENTIFIER ":" type ";"
   11      | OBJECT_IDENTIFIER ":" type "<-" expr ";"

   12 method: OBJECT_IDENTIFIER "(" formals ")" ":" type block

   13 formals: ε
   14        | formal_list

   15 formal_list: formal
   16            | formal_list "," formal

   17 formal: OBJECT_IDENTIFIER ":" type

   18 type: TYPE_IDENTIFIER
   19     | "int32"
   20     | "bool"
   21     | "string"
   22     | "unit"

   23 block: "{" expr_list "}"

   24 expr_list: expr
   25          | expr_list ";" expr

   26 expr: "if" expr "then" expr
   27     | "if" expr "then" expr "else" expr
   28     | "while" expr "do" expr
   29     | let_expr
   30     | OBJECT_IDENTIFIER "<-" expr
   31     | "not" expr
   32     | "-" expr
   33     | "isnull" expr
   34     | expr "=" expr
   35     | expr "<" expr
   36     | expr "<=" expr
   37     | expr "+" expr
   38     | expr "-" expr
   39     | expr "*" expr
   40     | expr "/" expr
   41     | expr "^" expr
   42     | expr "and" expr
   43     | OBJECT_IDENTIFIER "(" args ")"
   44     | expr "." OBJECT_IDENTIFIER "(" args ")"
   45     | "new" TYPE_IDENTIFIER
   46     | OBJECT_IDENTIFIER
   47     | "self"
   48     | INTEGER_LITERAL
   49     | STRING_LITERAL
   50     | "true"
   51     | "false"
   52     | "(" ")"
   53     | "(" expr ")"
   54     | block

   55 let_expr: "let" OBJECT_IDENTIFIER ":" type "in" expr
   56         | "let" OBJECT_IDENTIFIER ":" type "<-" expr "in" expr

   57 args: ε
   58     | arg_list

   59 arg_list: expr
   60         | arg_list "," expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER_LITERAL <int> (258) 48
    STRING_LITERAL <std::string> (259) 49
    TYPE_IDENTIFIER <std::string> (260) 4 5 18 45
    OBJECT_IDENTIFIER <std::string> (261) 10 11 12 17 30 43 44 46 55 56
    "{" (262) 4 5 23
    "}" (263) 4 5 23
    "(" (264) 12 43 44 52 53
    ")" (265) 12 43 44 52 53
    ":" (266) 10 11 12 17 55 56
    ";" (267) 10 11 25
    "," (268) 16 60
    "+" (269) 37
    "-" (270) 32 38
    "*" (271) 39
    "/" (272) 40
    "^" (273) 41
    "." (274) 44
    "=" (275) 34
    "<" (276) 35
    "<=" (277) 36
    "<-" (278) 11 30 56
    "and" (279) 42
    "bool" (280) 20
    "class" (281) 4 5
    "do" (282) 28
    "else" (283) 27
    "extends" (284) 5
    "false" (285) 51
    "if" (286) 26 27
    "in" (287) 55 56
    "int32" (288) 19
    "isnull" (289) 33
    "let" (290) 55 56
    "new" (291) 45
    "not" (292) 31
    "self" (293) 47
    "string" (294) 21
    "then" (295) 26 27
    "true" (296) 50
    "unit" (297) 22
    "while" (298) 28
    LET_PREC (299)
    THEN_PREC (300)
    UNOT (301)
    UMINUS (302)
    UISNULL (303)
    WHILE_PREC (304)


Nonterminals, with rules where they appear

    $accept (50)
        on left: 0
    program <VSOP::ProgramAst*> (51)
        on left: 1
        on right: 0
    class_list <std::vector<VSOP::ClassAst*>> (52)
        on left: 2 3
        on right: 1 3
    class <VSOP::ClassAst*> (53)
        on left: 4 5
        on right: 2 3
    member_list <std::vector<VSOP::Ast*>> (54)
        on left: 6 7
        on right: 4 5 7
    member <VSOP::Ast*> (55)
        on left: 8 9
        on right: 7
    field <VSOP::FieldAst*> (56)
        on left: 10 11
        on right: 8
    method <VSOP::MethodAst*> (57)
        on left: 12
        on right: 9
    formals <std::vector<VSOP::FormalAst*>> (58)
        on left: 13 14
        on right: 12
    formal_list <std::vector<VSOP::FormalAst*>> (59)
        on left: 15 16
        on right: 14 16
    formal <VSOP::FormalAst*> (60)
        on left: 17
        on right: 15 16
    type <std::string> (61)
        on left: 18 19 20 21 22
        on right: 10 11 12 17 55 56
    block <VSOP::ExprAst*> (62)
        on left: 23
        on right: 12 54
    expr_list <std::vector<VSOP::ExprAst*>> (63)
        on left: 24 25
        on right: 23 25
    expr <VSOP::ExprAst*> (64)
        on left: 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54
        on right: 11 24 25 26 27 28 30 31 32 33 34 35 36 37 38 39 40 41 42 44 53 55 56 59 60
    let_expr <VSOP::ExprAst*> (65)
        on left: 55 56
        on right: 29
    args <std::vector<VSOP::ExprAst*>> (66)
        on left: 57 58
        on right: 43 44
    arg_list <std::vector<VSOP::ExprAst*>> (67)
        on left: 59 60
        on right: 58 60


State 0

    0 $accept: • program $end

    "class"  shift, and go to state 1

    program     go to state 2
    class_list  go to state 3
    class       go to state 4


State 1

    4 class: "class" • TYPE_IDENTIFIER "{" member_list "}"
    5      | "class" • TYPE_IDENTIFIER "extends" TYPE_IDENTIFIER "{" member_list "}"

    TYPE_IDENTIFIER  shift, and go to state 5


State 2

    0 $accept: program • $end

    $end  shift, and go to state 6


State 3

    1 program: class_list •
    3 class_list: class_list • class

    "class"  shift, and go to state 1

    $default  reduce using rule 1 (program)

    class  go to state 7


State 4

    2 class_list: class •

    $default  reduce using rule 2 (class_list)


State 5

    4 class: "class" TYPE_IDENTIFIER • "{" member_list "}"
    5      | "class" TYPE_IDENTIFIER • "extends" TYPE_IDENTIFIER "{" member_list "}"

    "{"        shift, and go to state 8
    "extends"  shift, and go to state 9


State 6

    0 $accept: program $end •

    $default  accept


State 7

    3 class_list: class_list class •

    $default  reduce using rule 3 (class_list)


State 8

    4 class: "class" TYPE_IDENTIFIER "{" • member_list "}"

    $default  reduce using rule 6 (member_list)

    member_list  go to state 10


State 9

    5 class: "class" TYPE_IDENTIFIER "extends" • TYPE_IDENTIFIER "{" member_list "}"

    TYPE_IDENTIFIER  shift, and go to state 11


State 10

    4 class: "class" TYPE_IDENTIFIER "{" member_list • "}"
    7 member_list: member_list • member

    OBJECT_IDENTIFIER  shift, and go to state 12
    "}"                shift, and go to state 13

    member  go to state 14
    field   go to state 15
    method  go to state 16


State 11

    5 class: "class" TYPE_IDENTIFIER "extends" TYPE_IDENTIFIER • "{" member_list "}"

    "{"  shift, and go to state 17


State 12

   10 field: OBJECT_IDENTIFIER • ":" type ";"
   11      | OBJECT_IDENTIFIER • ":" type "<-" expr ";"
   12 method: OBJECT_IDENTIFIER • "(" formals ")" ":" type block

    "("  shift, and go to state 18
    ":"  shift, and go to state 19


State 13

    4 class: "class" TYPE_IDENTIFIER "{" member_list "}" •

    $default  reduce using rule 4 (class)


State 14

    7 member_list: member_list member •

    $default  reduce using rule 7 (member_list)


State 15

    8 member: field •

    $default  reduce using rule 8 (member)


State 16

    9 member: method •

    $default  reduce using rule 9 (member)


State 17

    5 class: "class" TYPE_IDENTIFIER "extends" TYPE_IDENTIFIER "{" • member_list "}"

    $default  reduce using rule 6 (member_list)

    member_list  go to state 20


State 18

   12 method: OBJECT_IDENTIFIER "(" • formals ")" ":" type block

    OBJECT_IDENTIFIER  shift, and go to state 21

    $default  reduce using rule 13 (formals)

    formals      go to state 22
    formal_list  go to state 23
    formal       go to state 24


State 19

   10 field: OBJECT_IDENTIFIER ":" • type ";"
   11      | OBJECT_IDENTIFIER ":" • type "<-" expr ";"

    TYPE_IDENTIFIER  shift, and go to state 25
    "bool"           shift, and go to state 26
    "int32"          shift, and go to state 27
    "string"         shift, and go to state 28
    "unit"           shift, and go to state 29

    type  go to state 30


State 20

    5 class: "class" TYPE_IDENTIFIER "extends" TYPE_IDENTIFIER "{" member_list • "}"
    7 member_list: member_list • member

    OBJECT_IDENTIFIER  shift, and go to state 12
    "}"                shift, and go to state 31

    member  go to state 14
    field   go to state 15
    method  go to state 16


State 21

   17 formal: OBJECT_IDENTIFIER • ":" type

    ":"  shift, and go to state 32


State 22

   12 method: OBJECT_IDENTIFIER "(" formals • ")" ":" type block

    ")"  shift, and go to state 33


State 23

   14 formals: formal_list •
   16 formal_list: formal_list • "," formal

    ","  shift, and go to state 34

    $default  reduce using rule 14 (formals)


State 24

   15 formal_list: formal •

    $default  reduce using rule 15 (formal_list)


State 25

   18 type: TYPE_IDENTIFIER •

    $default  reduce using rule 18 (type)


State 26

   20 type: "bool" •

    $default  reduce using rule 20 (type)


State 27

   19 type: "int32" •

    $default  reduce using rule 19 (type)


State 28

   21 type: "string" •

    $default  reduce using rule 21 (type)


State 29

   22 type: "unit" •

    $default  reduce using rule 22 (type)


State 30

   10 field: OBJECT_IDENTIFIER ":" type • ";"
   11      | OBJECT_IDENTIFIER ":" type • "<-" expr ";"

    ";"   shift, and go to state 35
    "<-"  shift, and go to state 36


State 31

    5 class: "class" TYPE_IDENTIFIER "extends" TYPE_IDENTIFIER "{" member_list "}" •

    $default  reduce using rule 5 (class)


State 32

   17 formal: OBJECT_IDENTIFIER ":" • type

    TYPE_IDENTIFIER  shift, and go to state 25
    "bool"           shift, and go to state 26
    "int32"          shift, and go to state 27
    "string"         shift, and go to state 28
    "unit"           shift, and go to state 29

    type  go to state 37


State 33

   12 method: OBJECT_IDENTIFIER "(" formals ")" • ":" type block

    ":"  shift, and go to state 38


State 34

   16 formal_list: formal_list "," • formal

    OBJECT_IDENTIFIER  shift, and go to state 21

    formal  go to state 39


State 35

   10 field: OBJECT_IDENTIFIER ":" type ";" •

    $default  reduce using rule 10 (field)


State 36

   11 field: OBJECT_IDENTIFIER ":" type "<-" • expr ";"

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 56
    let_expr  go to state 57


State 37

   17 formal: OBJECT_IDENTIFIER ":" type •

    $default  reduce using rule 17 (formal)


State 38

   12 method: OBJECT_IDENTIFIER "(" formals ")" ":" • type block

    TYPE_IDENTIFIER  shift, and go to state 25
    "bool"           shift, and go to state 26
    "int32"          shift, and go to state 27
    "string"         shift, and go to state 28
    "unit"           shift, and go to state 29

    type  go to state 58


State 39

   16 formal_list: formal_list "," formal •

    $default  reduce using rule 16 (formal_list)


State 40

   48 expr: INTEGER_LITERAL •

    $default  reduce using rule 48 (expr)


State 41

   49 expr: STRING_LITERAL •

    $default  reduce using rule 49 (expr)


State 42

   30 expr: OBJECT_IDENTIFIER • "<-" expr
   43     | OBJECT_IDENTIFIER • "(" args ")"
   46     | OBJECT_IDENTIFIER •

    "("   shift, and go to state 59
    "<-"  shift, and go to state 60

    $default  reduce using rule 46 (expr)


State 43

   23 block: "{" • expr_list "}"

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block      go to state 55
    expr_list  go to state 61
    expr       go to state 62
    let_expr   go to state 57


State 44

   52 expr: "(" • ")"
   53     | "(" • expr ")"

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    ")"                shift, and go to state 63
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 64
    let_expr  go to state 57


State 45

   32 expr: "-" • expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 65
    let_expr  go to state 57


State 46

   51 expr: "false" •

    $default  reduce using rule 51 (expr)


State 47

   26 expr: "if" • expr "then" expr
   27     | "if" • expr "then" expr "else" expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 66
    let_expr  go to state 57


State 48

   33 expr: "isnull" • expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 67
    let_expr  go to state 57


State 49

   55 let_expr: "let" • OBJECT_IDENTIFIER ":" type "in" expr
   56         | "let" • OBJECT_IDENTIFIER ":" type "<-" expr "in" expr

    OBJECT_IDENTIFIER  shift, and go to state 68


State 50

   45 expr: "new" • TYPE_IDENTIFIER

    TYPE_IDENTIFIER  shift, and go to state 69


State 51

   31 expr: "not" • expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 70
    let_expr  go to state 57


State 52

   47 expr: "self" •

    $default  reduce using rule 47 (expr)


State 53

   50 expr: "true" •

    $default  reduce using rule 50 (expr)


State 54

   28 expr: "while" • expr "do" expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 71
    let_expr  go to state 57


State 55

   54 expr: block •

    $default  reduce using rule 54 (expr)


State 56

   11 field: OBJECT_IDENTIFIER ":" type "<-" expr • ";"
   34 expr: expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    ";"    shift, and go to state 72
    "+"    shift, and go to state 73
    "-"    shift, and go to state 74
    "*"    shift, and go to state 75
    "/"    shift, and go to state 76
    "^"    shift, and go to state 77
    "."    shift, and go to state 78
    "="    shift, and go to state 79
    "<"    shift, and go to state 80
    "<="   shift, and go to state 81
    "and"  shift, and go to state 82


State 57

   29 expr: let_expr •

    $default  reduce using rule 29 (expr)


State 58

   12 method: OBJECT_IDENTIFIER "(" formals ")" ":" type • block

    "{"  shift, and go to state 43

    block  go to state 83


State 59

   43 expr: OBJECT_IDENTIFIER "(" • args ")"

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    $default  reduce using rule 57 (args)

    block     go to state 55
    expr      go to state 84
    let_expr  go to state 57
    args      go to state 85
    arg_list  go to state 86


State 60

   30 expr: OBJECT_IDENTIFIER "<-" • expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 87
    let_expr  go to state 57


State 61

   23 block: "{" expr_list • "}"
   25 expr_list: expr_list • ";" expr

    "}"  shift, and go to state 88
    ";"  shift, and go to state 89


State 62

   24 expr_list: expr •
   34 expr: expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    "+"    shift, and go to state 73
    "-"    shift, and go to state 74
    "*"    shift, and go to state 75
    "/"    shift, and go to state 76
    "^"    shift, and go to state 77
    "."    shift, and go to state 78
    "="    shift, and go to state 79
    "<"    shift, and go to state 80
    "<="   shift, and go to state 81
    "and"  shift, and go to state 82

    $default  reduce using rule 24 (expr_list)


State 63

   52 expr: "(" ")" •

    $default  reduce using rule 52 (expr)


State 64

   34 expr: expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"
   53     | "(" expr • ")"

    ")"    shift, and go to state 90
    "+"    shift, and go to state 73
    "-"    shift, and go to state 74
    "*"    shift, and go to state 75
    "/"    shift, and go to state 76
    "^"    shift, and go to state 77
    "."    shift, and go to state 78
    "="    shift, and go to state 79
    "<"    shift, and go to state 80
    "<="   shift, and go to state 81
    "and"  shift, and go to state 82


State 65

   32 expr: "-" expr •
   34     | expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    "^"  shift, and go to state 77
    "."  shift, and go to state 78

    $default  reduce using rule 32 (expr)


State 66

   26 expr: "if" expr • "then" expr
   27     | "if" expr • "then" expr "else" expr
   34     | expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    "+"     shift, and go to state 73
    "-"     shift, and go to state 74
    "*"     shift, and go to state 75
    "/"     shift, and go to state 76
    "^"     shift, and go to state 77
    "."     shift, and go to state 78
    "="     shift, and go to state 79
    "<"     shift, and go to state 80
    "<="    shift, and go to state 81
    "and"   shift, and go to state 82
    "then"  shift, and go to state 91


State 67

   33 expr: "isnull" expr •
   34     | expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    "^"  shift, and go to state 77
    "."  shift, and go to state 78

    $default  reduce using rule 33 (expr)


State 68

   55 let_expr: "let" OBJECT_IDENTIFIER • ":" type "in" expr
   56         | "let" OBJECT_IDENTIFIER • ":" type "<-" expr "in" expr

    ":"  shift, and go to state 92


State 69

   45 expr: "new" TYPE_IDENTIFIER •

    $default  reduce using rule 45 (expr)


State 70

   31 expr: "not" expr •
   34     | expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    "+"   shift, and go to state 73
    "-"   shift, and go to state 74
    "*"   shift, and go to state 75
    "/"   shift, and go to state 76
    "^"   shift, and go to state 77
    "."   shift, and go to state 78
    "="   shift, and go to state 79
    "<"   shift, and go to state 80
    "<="  shift, and go to state 81

    $default  reduce using rule 31 (expr)


State 71

   28 expr: "while" expr • "do" expr
   34     | expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    "+"    shift, and go to state 73
    "-"    shift, and go to state 74
    "*"    shift, and go to state 75
    "/"    shift, and go to state 76
    "^"    shift, and go to state 77
    "."    shift, and go to state 78
    "="    shift, and go to state 79
    "<"    shift, and go to state 80
    "<="   shift, and go to state 81
    "and"  shift, and go to state 82
    "do"   shift, and go to state 93


State 72

   11 field: OBJECT_IDENTIFIER ":" type "<-" expr ";" •

    $default  reduce using rule 11 (field)


State 73

   37 expr: expr "+" • expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 94
    let_expr  go to state 57


State 74

   38 expr: expr "-" • expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 95
    let_expr  go to state 57


State 75

   39 expr: expr "*" • expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 96
    let_expr  go to state 57


State 76

   40 expr: expr "/" • expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 97
    let_expr  go to state 57


State 77

   41 expr: expr "^" • expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 98
    let_expr  go to state 57


State 78

   44 expr: expr "." • OBJECT_IDENTIFIER "(" args ")"

    OBJECT_IDENTIFIER  shift, and go to state 99


State 79

   34 expr: expr "=" • expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 100
    let_expr  go to state 57


State 80

   35 expr: expr "<" • expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 101
    let_expr  go to state 57


State 81

   36 expr: expr "<=" • expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 102
    let_expr  go to state 57


State 82

   42 expr: expr "and" • expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 103
    let_expr  go to state 57


State 83

   12 method: OBJECT_IDENTIFIER "(" formals ")" ":" type block •

    $default  reduce using rule 12 (method)


State 84

   34 expr: expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"
   59 arg_list: expr •

    "+"    shift, and go to state 73
    "-"    shift, and go to state 74
    "*"    shift, and go to state 75
    "/"    shift, and go to state 76
    "^"    shift, and go to state 77
    "."    shift, and go to state 78
    "="    shift, and go to state 79
    "<"    shift, and go to state 80
    "<="   shift, and go to state 81
    "and"  shift, and go to state 82

    $default  reduce using rule 59 (arg_list)


State 85

   43 expr: OBJECT_IDENTIFIER "(" args • ")"

    ")"  shift, and go to state 104


State 86

   58 args: arg_list •
   60 arg_list: arg_list • "," expr

    ","  shift, and go to state 105

    $default  reduce using rule 58 (args)


State 87

   30 expr: OBJECT_IDENTIFIER "<-" expr •
   34     | expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    "+"    shift, and go to state 73
    "-"    shift, and go to state 74
    "*"    shift, and go to state 75
    "/"    shift, and go to state 76
    "^"    shift, and go to state 77
    "."    shift, and go to state 78
    "="    shift, and go to state 79
    "<"    shift, and go to state 80
    "<="   shift, and go to state 81
    "and"  shift, and go to state 82

    $default  reduce using rule 30 (expr)


State 88

   23 block: "{" expr_list "}" •

    $default  reduce using rule 23 (block)


State 89

   25 expr_list: expr_list ";" • expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 106
    let_expr  go to state 57


State 90

   53 expr: "(" expr ")" •

    $default  reduce using rule 53 (expr)


State 91

   26 expr: "if" expr "then" • expr
   27     | "if" expr "then" • expr "else" expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 107
    let_expr  go to state 57


State 92

   55 let_expr: "let" OBJECT_IDENTIFIER ":" • type "in" expr
   56         | "let" OBJECT_IDENTIFIER ":" • type "<-" expr "in" expr

    TYPE_IDENTIFIER  shift, and go to state 25
    "bool"           shift, and go to state 26
    "int32"          shift, and go to state 27
    "string"         shift, and go to state 28
    "unit"           shift, and go to state 29

    type  go to state 108


State 93

   28 expr: "while" expr "do" • expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 109
    let_expr  go to state 57


State 94

   34 expr: expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   37     | expr "+" expr •
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    "*"  shift, and go to state 75
    "/"  shift, and go to state 76
    "^"  shift, and go to state 77
    "."  shift, and go to state 78

    $default  reduce using rule 37 (expr)


State 95

   34 expr: expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   38     | expr "-" expr •
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    "*"  shift, and go to state 75
    "/"  shift, and go to state 76
    "^"  shift, and go to state 77
    "."  shift, and go to state 78

    $default  reduce using rule 38 (expr)


State 96

   34 expr: expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   39     | expr "*" expr •
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    "^"  shift, and go to state 77
    "."  shift, and go to state 78

    $default  reduce using rule 39 (expr)


State 97

   34 expr: expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   40     | expr "/" expr •
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    "^"  shift, and go to state 77
    "."  shift, and go to state 78

    $default  reduce using rule 40 (expr)


State 98

   34 expr: expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   41     | expr "^" expr •
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    "^"  shift, and go to state 77
    "."  shift, and go to state 78

    $default  reduce using rule 41 (expr)


State 99

   44 expr: expr "." OBJECT_IDENTIFIER • "(" args ")"

    "("  shift, and go to state 110


State 100

   34 expr: expr • "=" expr
   34     | expr "=" expr •
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    "+"  shift, and go to state 73
    "-"  shift, and go to state 74
    "*"  shift, and go to state 75
    "/"  shift, and go to state 76
    "^"  shift, and go to state 77
    "."  shift, and go to state 78

    "="   error (nonassociative)
    "<"   error (nonassociative)
    "<="  error (nonassociative)

    $default  reduce using rule 34 (expr)


State 101

   34 expr: expr • "=" expr
   35     | expr • "<" expr
   35     | expr "<" expr •
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    "+"  shift, and go to state 73
    "-"  shift, and go to state 74
    "*"  shift, and go to state 75
    "/"  shift, and go to state 76
    "^"  shift, and go to state 77
    "."  shift, and go to state 78

    "="   error (nonassociative)
    "<"   error (nonassociative)
    "<="  error (nonassociative)

    $default  reduce using rule 35 (expr)


State 102

   34 expr: expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   36     | expr "<=" expr •
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    "+"  shift, and go to state 73
    "-"  shift, and go to state 74
    "*"  shift, and go to state 75
    "/"  shift, and go to state 76
    "^"  shift, and go to state 77
    "."  shift, and go to state 78

    "="   error (nonassociative)
    "<"   error (nonassociative)
    "<="  error (nonassociative)

    $default  reduce using rule 36 (expr)


State 103

   34 expr: expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   42     | expr "and" expr •
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    "+"   shift, and go to state 73
    "-"   shift, and go to state 74
    "*"   shift, and go to state 75
    "/"   shift, and go to state 76
    "^"   shift, and go to state 77
    "."   shift, and go to state 78
    "="   shift, and go to state 79
    "<"   shift, and go to state 80
    "<="  shift, and go to state 81

    $default  reduce using rule 42 (expr)


State 104

   43 expr: OBJECT_IDENTIFIER "(" args ")" •

    $default  reduce using rule 43 (expr)


State 105

   60 arg_list: arg_list "," • expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 111
    let_expr  go to state 57


State 106

   25 expr_list: expr_list ";" expr •
   34 expr: expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    "+"    shift, and go to state 73
    "-"    shift, and go to state 74
    "*"    shift, and go to state 75
    "/"    shift, and go to state 76
    "^"    shift, and go to state 77
    "."    shift, and go to state 78
    "="    shift, and go to state 79
    "<"    shift, and go to state 80
    "<="   shift, and go to state 81
    "and"  shift, and go to state 82

    $default  reduce using rule 25 (expr_list)


State 107

   26 expr: "if" expr "then" expr •
   27     | "if" expr "then" expr • "else" expr
   34     | expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    "+"     shift, and go to state 73
    "-"     shift, and go to state 74
    "*"     shift, and go to state 75
    "/"     shift, and go to state 76
    "^"     shift, and go to state 77
    "."     shift, and go to state 78
    "="     shift, and go to state 79
    "<"     shift, and go to state 80
    "<="    shift, and go to state 81
    "and"   shift, and go to state 82
    "else"  shift, and go to state 112

    $default  reduce using rule 26 (expr)


State 108

   55 let_expr: "let" OBJECT_IDENTIFIER ":" type • "in" expr
   56         | "let" OBJECT_IDENTIFIER ":" type • "<-" expr "in" expr

    "<-"  shift, and go to state 113
    "in"  shift, and go to state 114


State 109

   28 expr: "while" expr "do" expr •
   34     | expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    $default  reduce using rule 28 (expr)


State 110

   44 expr: expr "." OBJECT_IDENTIFIER "(" • args ")"

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    $default  reduce using rule 57 (args)

    block     go to state 55
    expr      go to state 84
    let_expr  go to state 57
    args      go to state 115
    arg_list  go to state 86


State 111

   34 expr: expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"
   60 arg_list: arg_list "," expr •

    "+"    shift, and go to state 73
    "-"    shift, and go to state 74
    "*"    shift, and go to state 75
    "/"    shift, and go to state 76
    "^"    shift, and go to state 77
    "."    shift, and go to state 78
    "="    shift, and go to state 79
    "<"    shift, and go to state 80
    "<="   shift, and go to state 81
    "and"  shift, and go to state 82

    $default  reduce using rule 60 (arg_list)


State 112

   27 expr: "if" expr "then" expr "else" • expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 116
    let_expr  go to state 57


State 113

   56 let_expr: "let" OBJECT_IDENTIFIER ":" type "<-" • expr "in" expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 117
    let_expr  go to state 57


State 114

   55 let_expr: "let" OBJECT_IDENTIFIER ":" type "in" • expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 118
    let_expr  go to state 57


State 115

   44 expr: expr "." OBJECT_IDENTIFIER "(" args • ")"

    ")"  shift, and go to state 119


State 116

   27 expr: "if" expr "then" expr "else" expr •
   34     | expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"

    "+"    shift, and go to state 73
    "-"    shift, and go to state 74
    "*"    shift, and go to state 75
    "/"    shift, and go to state 76
    "^"    shift, and go to state 77
    "."    shift, and go to state 78
    "="    shift, and go to state 79
    "<"    shift, and go to state 80
    "<="   shift, and go to state 81
    "and"  shift, and go to state 82

    $default  reduce using rule 27 (expr)


State 117

   34 expr: expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"
   56 let_expr: "let" OBJECT_IDENTIFIER ":" type "<-" expr • "in" expr

    "+"    shift, and go to state 73
    "-"    shift, and go to state 74
    "*"    shift, and go to state 75
    "/"    shift, and go to state 76
    "^"    shift, and go to state 77
    "."    shift, and go to state 78
    "="    shift, and go to state 79
    "<"    shift, and go to state 80
    "<="   shift, and go to state 81
    "and"  shift, and go to state 82
    "in"   shift, and go to state 120


State 118

   34 expr: expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"
   55 let_expr: "let" OBJECT_IDENTIFIER ":" type "in" expr •

    "+"    shift, and go to state 73
    "-"    shift, and go to state 74
    "*"    shift, and go to state 75
    "/"    shift, and go to state 76
    "^"    shift, and go to state 77
    "."    shift, and go to state 78
    "="    shift, and go to state 79
    "<"    shift, and go to state 80
    "<="   shift, and go to state 81
    "and"  shift, and go to state 82

    $default  reduce using rule 55 (let_expr)


State 119

   44 expr: expr "." OBJECT_IDENTIFIER "(" args ")" •

    $default  reduce using rule 44 (expr)


State 120

   56 let_expr: "let" OBJECT_IDENTIFIER ":" type "<-" expr "in" • expr

    INTEGER_LITERAL    shift, and go to state 40
    STRING_LITERAL     shift, and go to state 41
    OBJECT_IDENTIFIER  shift, and go to state 42
    "{"                shift, and go to state 43
    "("                shift, and go to state 44
    "-"                shift, and go to state 45
    "false"            shift, and go to state 46
    "if"               shift, and go to state 47
    "isnull"           shift, and go to state 48
    "let"              shift, and go to state 49
    "new"              shift, and go to state 50
    "not"              shift, and go to state 51
    "self"             shift, and go to state 52
    "true"             shift, and go to state 53
    "while"            shift, and go to state 54

    block     go to state 55
    expr      go to state 121
    let_expr  go to state 57


State 121

   34 expr: expr • "=" expr
   35     | expr • "<" expr
   36     | expr • "<=" expr
   37     | expr • "+" expr
   38     | expr • "-" expr
   39     | expr • "*" expr
   40     | expr • "/" expr
   41     | expr • "^" expr
   42     | expr • "and" expr
   44     | expr • "." OBJECT_IDENTIFIER "(" args ")"
   56 let_expr: "let" OBJECT_IDENTIFIER ":" type "<-" expr "in" expr •

    "+"    shift, and go to state 73
    "-"    shift, and go to state 74
    "*"    shift, and go to state 75
    "/"    shift, and go to state 76
    "^"    shift, and go to state 77
    "."    shift, and go to state 78
    "="    shift, and go to state 79
    "<"    shift, and go to state 80
    "<="   shift, and go to state 81
    "and"  shift, and go to state 82

    $default  reduce using rule 56 (let_expr)
