Tests run on Fri Mar 21 20:59:15 UTC 2025

Decompressing your archive...
Entering vsopcompiler folder...
Installing build tools...
nothing to do
Building your VSOP compiler...
bison -d -d -o parser.cpp parser.y
clang++ -Wall -Wextra -Wno-unused-private-field   -c -o main.o main.cpp
flex  -o lexer.cpp lexer.lex
clang++ -Wall -Wextra -Wno-unused-private-field   -c -o lexer.o lexer.cpp
clang++ -Wall -Wextra -Wno-unused-private-field   -c -o driver.o driver.cpp
clang++ -Wall -Wextra -Wno-unused-private-field   -c -o parser.o parser.cpp
clang++ -Wall -Wextra -Wno-unused-private-field   -c -o ast.o ast.cpp
clang++ -o vsopc  main.o lexer.o driver.o parser.o ast.o
Your VSOP compiler seems to have been built successfully. We will now
proceed to some basic conformance tests of your lexer.

Please note that the tests are not exhaustive, and full success on the
tests does not mean your lexer is perfect. You are responsible for
testing your lexer. Write your own tests!

If a test fails, this script will output the corresponding VSOP code,
the expected output, and your compiler output. We will only report this
information for the first few failed tests, however.

Note that as the e-mail transfer is destroying many non-printable
characters, the files are printed with 'cat -v', i.e. "\r" is replaced
by "^M", "\f" by "^L", etc.

As you were free to design your own error messages, and we did not specified
what you should do after a lexical error (e.g. stop, continue just after the
faulty token, try to resynchronize on a likely token start, etc.), this script
will only check error messages up to the "<FILENAME>:<LINE>:<COL>: lexical
error", and will stop both error and output processing after the first error.

If you think the expected output is wrong, and your compiler is correct, double
check the VSOP manual and the wording. If, after that, you still think you are
correct and we are wrong, report it to the teaching assistant.

If the script crashes, report it to the teaching assistant.

01-decimal-numbers.vsop... PASS
02-whitespace.vsop... PASS
03-single-line-comments.vsop... PASS
04-multiline-comments.vsop... PASS
05-hex-numbers.vsop... PASS
06-keywords.vsop... PASS
07-type-identifiers.vsop... PASS
08-object-identifiers.vsop... PASS
09-basic-strings.vsop... PASS
10-strings-with-escapes.vsop... PASS
11-multiline-string.vsop... PASS
12-comment-in-string.vsop... PASS
13-operators.vsop... PASS
14-eof-after-decimal-number.vsop... PASS
15-eof-after-object-identifier.vsop... PASS
16-eof-after-string.vsop... PASS
17-eof-after-keyword.vsop... PASS
18-eof-after-comment.vsop... PASS
19-MyClass-example.vsop... PASS
20-factorial-example.vsop... PASS
21-list-example.vsop... PASS
22-unterminated-comment.vsop... PASS
23-unterminated-nested-comment.vsop... PASS
24-wrong-decimal-number.vsop... PASS
25-incomplete-hex-number.vsop... PASS
26-wrong-hex-number.vsop... PASS
27-number-followed-by-operator.vsop... PASS
28-invalid-lf-in-string.vsop... PASS
29-unterminated-string.vsop... PASS
30-unterminated-multiline-string.vsop... PASS
31-unknown-escape-sequence.vsop... PASS
32-string-ends-in-backslash.vsop... PASS
33-string-ends-in-backslash-x.vsop... PASS
34-string-ends-in-backslash-x-3.vsop... PASS
35-wrong-backslash-x-escape.vsop... PASS
36-illegal-char-dollar.vsop... PASS
37-illegal-char-tilde.vsop... PASS
38-illegal-char-exclamation-mark.vsop... PASS
39-illegal-char-rbracket.vsop... PASS

lexer-tests: passed 39 tests out of 39.
Congratulations!

Now moving on to syntax analysis tests. Remember that exact error message
locations are not checked, but only the occurrence of errors. If input is
valid, your program should exit with return code 0, and only output on stdout.
Your AST dump will be checked against the one from the reference
implementation (ignoring spaces and newlines). If input is invalid, this script
only checks that your program returns with something different than 0, and
prints a syntax error on stderr.

Once again, if you think your compiler is right, and ours wrong, report it to
the teaching assistant.


Entering syntax-tests...
01-empty-class.vsop... PASS
02-two-empty-classes.vsop... PASS
03-empty-parent.vsop... PASS
04-uninitialized-field.vsop... PASS
05-initialized-field.vsop... PASS
06-method-no-args.vsop... PASS
07-method-one-arg.vsop... PASS
08-method-many-args.vsop... PASS
09-field-and-method.vsop... PASS
10-fields-and-methods-in-order.vsop... PASS
11-fields-and-methods-interleaved.vsop... PASS
12-simple-if-then.vsop... PASS
13-simple-if-then-else.vsop... PASS
14-dangling-else-1.vsop... PASS
15-dangling-else-2.vsop... PASS
16-imbricated-if-then-else.vsop... PASS
17-while.vsop... PASS
18-let-uninitialized.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
// Valid comment
class T {
    field : int32 <- let x : int32 in x * x; // x uninitialized here!
}
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
[Class(T, Object, [Field(field, int32, BinOp(*, Let(x, int32, x), x))], [])]
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
[Class(T, Object, [Field(field, int32, Let(x, int32, BinOp(*, x, x)))], [])]
----------------- 8< -----------------

19-let-initialized.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
    class // Strange indentation is allowed
 T 
        {
    field : int32 <- let x : int32 <- 42 in x * x;

	
}
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
[Class(T, Object, [Field(field, int32, BinOp(*, Let(x, int32, 42, x), x))], [])]
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
[Class(T, Object, [Field(field, int32, Let(x, int32, 42, BinOp(*, x, x)))],
   [])]
----------------- 8< -----------------

20-lets.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
class MyClass extends ItsParent {

    someMethod(x : int32) : int32 {
        let x2 : int32 <- x * x in
        let x4 : int32 <- x2 * x2 in {
            let x3 : int32 <- x2 * x in
            x4 + x3 + x2 + x
        }
    }
}
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
[Class(MyClass, ItsParent, [], [Method(someMethod, [x : int32], int32, [Let(x2, int32, BinOp(*, x, x), Let(x4, int32, BinOp(*, x2, x2), [BinOp(+, BinOp(+, BinOp(+, Let(x3, int32, BinOp(*, x2, x), x4), x3), x2), x)]))])])]
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
[Class(MyClass, ItsParent, [],
   [Method(someMethod, [x : int32], int32,
      [Let(x2, int32, BinOp(*, x, x),
         Let(x4, int32, BinOp(*, x2, x2),
           [Let(x3, int32, BinOp(*, x2, x),
              BinOp(+, BinOp(+, BinOp(+, x4, x3), x2), x))]))])])]
----------------- 8< -----------------

21-simple-assign.vsop... PASS
22-tricky-assign.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
class T {
    x : int32;

    f() : int32 {
        let x : int32 in
        x <- let y : int32 in
        y <- let x : int32 <- 42 in x * x;
        x // This is the field (0), neither 42 nor 42^2
    }
}
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
[Class(T, Object, [Field(x, int32)], [Method(f, [], int32, [Let(x, int32, Assign(x, Let(y, int32, Assign(y, BinOp(*, Let(x, int32, 42, x), x))))), x])])]
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
[Class(T, Object, [Field(x, int32)],
   [Method(f, [], int32,
      [Let(x, int32,
         Assign(x,
           Let(y, int32, Assign(y, Let(x, int32, 42, BinOp(*, x, x)))))),
       x])])]
----------------- 8< -----------------

23-log-expr.vsop... PASS
24-arith-expr.vsop... PASS
25-log-arith-expr.vsop... PASS
26-isnull.vsop... PASS
27-calls.vsop... PASS
28-mixed-calls.vsop... PASS
29-block-init.vsop... PASS
30-new.vsop... PASS
31-MyClass-example.vsop... PASS
32-factorial-example.vsop... FAIL

Your compiler's output differs from expected output.

Here is the input file:
----------------- 8< -----------------
class Main {
    factorial(n : int32) : int32 {
        if n < 2 then 1
        else n * factorial(n - 1)
    }

    main() : int32 {
        print("Enter an integer greater-than or equal to 0: ");
        let n : int32 <- inputInt32() in
        if n < 0 then {
            print("Error: number must be greater-than or equal to 0.\n");
            -1
        } else {
            print("The factorial of ").printInt32(n).print(" is ");
            printInt32(factorial(n)).print("\n");
            0
        }
    }
}
----------------- 8< -----------------

Here is your program's (standard) output:
----------------- 8< -----------------
[Class(Main, Object, [], [Method(factorial, [n : int32], int32, [BinOp(*, If(BinOp(<, n, 2), 1, n), Call(self, factorial, [BinOp(-, n, 1)]))]), Method(main, [], int32, [Call(self, print, ["Enter an integer greater-than or equal to 0: "]), Let(n, int32, Call(self, inputInt32, []), If(BinOp(<, n, 0), [Call(self, print, ["Error: number must be greater-than or equal to 0.\x0a"]), UnOp(-, 1)], [Call(Call(Call(self, print, ["The factorial of "]), printInt32, [n]), print, [" is "]), Call(Call(self, printInt32, [Call(self, factorial, [n])]), print, ["\x0a"]), 0]))])])]
----------------- 8< -----------------

Here is the expected standard output:
----------------- 8< -----------------
[Class(Main, Object, [],
   [Method(factorial, [n : int32], int32,
      [If(BinOp(<, n, 2), 1,
         BinOp(*, n, Call(self, factorial, [BinOp(-, n, 1)])))]),
    Method(main, [], int32,
      [Call(self, print, ["Enter an integer greater-than or equal to 0: "]),
       Let(n, int32, Call(self, inputInt32, []),
         If(BinOp(<, n, 0),
           [Call(self, print,
              ["Error: number must be greater-than or equal to 0.\x0a"]),
            UnOp(-, 1)],
           [Call(
              Call(Call(self, print, ["The factorial of "]), printInt32, [n]),
              print, [" is "]),
            Call(Call(self, printInt32, [Call(self, factorial, [n])]), print,
              ["\x0a"]),
            0]))])])]
----------------- 8< -----------------

33-list-example.vsop... PASS
34-field-no-semicolon.vsop... PASS
35-wrong-class-name.vsop... PASS
36-field-misses-type.vsop... PASS
37-field-uppercase.vsop... PASS
38-method-lowercase.vsop... PASS
39-method-no-args.vsop... PASS
40-method-misses-type.vsop... PASS
41-surnumeral-semicolon.vsop... PASS
42-method-no-braces.vsop... PASS
43-missing-closing-brace.vsop... PASS
44-uppercase-keyword.vsop... PASS
45-field-through-self.vsop... PASS
46-bare-field.vsop... PASS
47-bare-method.vsop... PASS
48-class-in-class.vsop... PASS
49-extends-many-1.vsop... PASS
50-extends-many-2.vsop... PASS
51-block-miss-braces.vsop... PASS
54-self-field.vsop... PASS
55-self-arg.vsop... PASS
56-self-var.vsop... PASS
57-assign-to-self.vsop... PASS

syntax-tests: passed 50 tests out of 55.
Still some work to do!
