class P { name() : string { "P" } }
class C extends P {
    name() : string { "C" }
    onlyInC() : int32 { (* ... *) }
}
class Other {
    myMethod() : string {
        let p : P <-                // Declared type is P => static type is P.
            if inputInt32() = 0     // inputInt32() will ask the user for a number.
                then new C          // `new C` valid here as C conforms to P.
                else new P
        in {
            p.onlyInC(); // Type error. Static type is P, not C. Would be valid
                         // if the user typed 0, but we cannot tell at compile
                         // time.
            p.name() // Dispatch is done using dynamic type.
                     // Will return "P" or "C" depending on what the user typed.
        }
    }
}
